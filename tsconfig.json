{
  "compileOnSave": true,
  "compilerOptions": {
    /* Language and Environment */
    "target": "ES5" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      "DOM",
      "DOM.Iterable",
      "ES2015",
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    "jsx": "react" /* Specify what JSX code is generated. */,
    "experimentalDecorators": true /* Enable experimental support for legacy experimental decorators. */,
    "emitDecoratorMetadata": true /* Emit design-type metadata for decorated declarations in source files. */,
    /* Modules */
    "module": "CommonJS" /* Specify what module code is generated. */,
    "rootDir": "./src" /* Specify the root folder within your source files. */,
    "moduleResolution": "Node" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "baseUrl": "./" /* Specify the base directory to resolve non-relative module names. */,
    "paths": {
      "@/*": ["./src/*"],
      "~/*": ["./*"],
    } /* Specify a set of entries that re-map imports to additional lookup locations. */,
    /* Emit */
    "pretty": true,
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "inlineSourceMap": true /* Include sourcemap files inside the emitted JavaScript. */,
    "outDir": "lib" /* Specify an output folder for all emitted files. */,
    "stripInternal": true /* Disable emitting declarations that have '@internal' in their JSDoc comments. */,
    /* Interop Constraints */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
    "noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
    "skipLibCheck": true /* Skip type checking all .d.ts files. */,
  },
  "ts-node": {
    "esm": true,
  },
  "exclude": ["lib", "node_modules"],
}
